/**
 * Kinesis Aggregation/Deaggregation Libraries for Java
 *
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.amazonaws.kinesis.consumer;

import java.util.List;

import com.amazonaws.kinesis.deagg.RecordDeaggregator;
import com.amazonaws.kinesis.deagg.RecordDeaggregator.KinesisUserRecordProcessor;
import com.amazonaws.services.kinesis.clientlibrary.types.UserRecord;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.KinesisEvent;

/**
 * A sample AWS Lambda function to process records that adhere to the Kinesis aggregated record
 * format (generally records generated by either the Kinesis Producer Library (KPL) or the 
 * KinesisAggregator project.
 * 
 * @see <a href="https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md">https://github.com/awslabs/amazon-kinesis-producer/blob/master/aggregation-format.md</a>
 */
public class KinesisLambdaReceiver implements RequestHandler<KinesisEvent, Void> {
	/**
	 * @see com.amazonaws.services.lambda.runtime.RequestHandler#handleRequest(java.lang.Object, com.amazonaws.services.lambda.runtime.Context)
	 */
    public Void handleRequest(KinesisEvent event, Context context) {
		LambdaLogger logger = context.getLogger();
		logger.log("Received " + event.getRecords().size() + " raw Event Records.");

		// Stream the User Records from the Lambda Event
		RecordDeaggregator.stream(event.getRecords().stream(), userRecord -> {
			// Your User Record Processing Code Here!
			logger.log(new String(userRecord.getData().array()));
		});

		return null;
	}

    /**
     * @see com.amazonaws.services.lambda.runtime.RequestHandler#handleRequest(java.lang.Object, com.amazonaws.services.lambda.runtime.Context)
     */
    public Void handleRequestWithLists(KinesisEvent event, Context context) {
		LambdaLogger logger = context.getLogger();
		logger.log("Received " + event.getRecords().size() + " raw Event Records.");

		try {
			// process the user records with an anonymous record processor
			// instance
			RecordDeaggregator.processRecords(event.getRecords(), new KinesisUserRecordProcessor() {
				public Void process(List<UserRecord> userRecords) {
					for (UserRecord userRecord : userRecords) {
						// Your User Record Processing Code Here!
						logger.log(new String(userRecord.getData().array()));
					}

					return null;
				}
			});
		} catch (Exception e) {
			logger.log(e.getMessage());
		}

		return null;
	}

    /**
     * @see com.amazonaws.services.lambda.runtime.RequestHandler#handleRequest(java.lang.Object, com.amazonaws.services.lambda.runtime.Context)
     */
    public Void handleRequestBulkList(KinesisEvent event, Context context) {
		LambdaLogger logger = context.getLogger();
		logger.log("Received " + event.getRecords().size() + " raw Event Records.");

		try {
			List<UserRecord> userRecords = RecordDeaggregator.deaggregate(event.getRecords());
			for (UserRecord userRecord : userRecords) {
				// Your User Record Processing Code Here!
				logger.log(new String(userRecord.getData().array()));
			}
		} catch (Exception e) {
			logger.log(e.getMessage());
		}

		return null;
	}

}
